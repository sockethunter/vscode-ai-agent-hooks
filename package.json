{
  "name": "ai-agent-hooks",
  "displayName": "HookFlow - AI Agent Hooks",
  "description": "Automated event-driven AI agent hooks for VSCode",
  "version": "0.3.0",
  "publisher": "sockethunter",
  "icon": "images/mascot.png",
  "repository": {
    "url": "https://github.com/sockethunter/vscode-ai-agent-hooks"
  },
  "engines": {
    "vscode": "^1.103.0"
  },
  "categories": [
    "AI",
    "Machine Learning",
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "ai-agent-hooks.selectProvider",
        "title": "Choose AI Provider",
        "category": "HookFlow - AI Agent Hooks"
      },
      {
        "command": "ai-agent-hooks.testProvider",
        "title": "Test AI Provider",
        "category": "HookFlow - AI Agent Hooks"
      },
      {
        "command": "ai-agent-hooks.manageHooks",
        "title": "Open Hook Manager",
        "category": "HookFlow - AI Agent Hooks"
      },
      {
        "command": "ai-agent-hooks.configureMcp",
        "title": "Configure MCP Tools",
        "category": "HookFlow - AI Agent Hooks"
      },
      {
        "command": "ai-agent-hooks.openVibe",
        "title": "Open Vibe Mode",
        "category": "HookFlow - AI Agent Hooks"
      }
    ],
    "configuration": {
      "title": "HookFlow - AI Agent Hooks",
      "properties": {
        "aiAgentHooks.provider": {
          "type": "string",
          "enum": [
            "openai",
            "anthropic",
            "ollama",
            "azure-openai"
          ],
          "description": "Currently chosen AI provider"
        },
        "aiAgentHooks.openai.apiKey": {
          "type": "string",
          "description": "OpenAI API Key"
        },
        "aiAgentHooks.openai.model": {
          "type": "string",
          "default": "gpt-4",
          "description": "OpenAI Modell"
        },
        "aiAgentHooks.anthropic.apiKey": {
          "type": "string",
          "description": "Anthropic API Key"
        },
        "aiAgentHooks.anthropic.model": {
          "type": "string",
          "default": "claude-sonnet-4-20250514",
          "description": "Anthropic Modell"
        },
        "aiAgentHooks.ollama.baseUrl": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "Ollama Base URL"
        },
        "aiAgentHooks.ollama.model": {
          "type": "string",
          "default": "llama2",
          "description": "Ollama Modell"
        },
        "aiAgentHooks.azureOpenai.apiKey": {
          "type": "string",
          "description": "Azure OpenAI API Key"
        },
        "aiAgentHooks.azureOpenai.baseUrl": {
          "type": "string",
          "description": "Azure OpenAI Endpoint"
        },
        "aiAgentHooks.azureOpenai.model": {
          "type": "string",
          "description": "Azure OpenAI Deployment Name"
        },
        "aiAgentHooks.mcp.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable MCP (Model Context Protocol) integration for advanced hook reasoning"
        },
        "aiAgentHooks.mcp.defaultTools": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "mcp_filesystem_list",
            "mcp_filesystem_read",
            "mcp_search_find",
            "mcp_git_status"
          ],
          "description": "Default MCP tools available for new hooks"
        },
        "aiAgentHooks.mcp.allowedTools": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "mcp_filesystem_list",
            "mcp_filesystem_read",
            "mcp_filesystem_read_multiple",
            "mcp_search_find",
            "mcp_search_grep",
            "mcp_git_status",
            "mcp_git_log"
          ],
          "description": "All available MCP tools that can be enabled for hooks"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./ && npm run copy-assets",
    "copy-assets": "mkdir -p out/webview && cp -r src/webview/assets out/webview/ && cp -r src/webview/templates out/webview/",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "test:coverage": "c8 --src=out --exclude='out/test/**' --exclude='out/webview/**' --exclude='eslint.config.mjs' --reporter=text --reporter=html --reporter=lcov npm test",
    "test:coverage-ci": "c8 --src=out --exclude='out/test/**' --exclude='out/webview/**' --exclude='eslint.config.mjs' --reporter=lcov --reporter=text-summary npm test",
    "package": "npm run compile && vsce package"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.103.0",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "c8": "^10.1.3",
    "eslint": "^9.32.0",
    "nyc": "^17.1.0",
    "typescript": "^5.9.2",
    "vsce": "^2.12.0"
  }
}
